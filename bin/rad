#!/usr/bin/env php
<?php
declare(strict_types = 1);
$rootDir = realpath(__DIR__ . '/../');

// Autoloader for standalone install (installed via `composer create-project` or cloned locally)
$autoloader = realpath($rootDir . '/vendor/autoload.php');

if (!$autoloader) {
    // Installed via `composer [global] require`.
    $autoloader = realpath($rootDir . '/../../autoload.php');
}

if (!$autoloader) {
    throw new RuntimeException(
    'RAD Framework was unable to find its autoloader. ' .
    'Did you forget to run "composer update"?'
    );
}

require_once $autoloader;

if (!isset($argv[1])) {
    throw new RuntimeException(
    'Missing action parameter '
    );
}
$actionName = $argv[1];
$actionType = $argv[2];

switch ($actionName) {
    case 'create':
        fireCreate($actionType, $argv);
        break;
    case 'build':
        fireBuild($actionType, $argv);
        break;
}

function fireBuild(string $actionType, $argv) {
    switch ($actionType) {
        case "project":
            checkArg($argv[3], 'Missing project name ');
            \Rad\Composer\Manager::buildProject($argv[3]);
            break;
    }
}

function fireCreate(string $actionType, $argv) {
    switch ($actionType) {
        case "project":
            checkArg($argv[3], 'Missing project name ');
            \Rad\Composer\Manager::createProject($argv[3]);
            break;
        case "service":
            checkArg($argv[3], 'Missing service type ');
            checkArg($argv[4], 'Missing service name ');
            \Rad\Composer\Manager::createService($argv[3], $argv[4]);
            break;
    }
}

function checkArg($arg, $message) {
    if (!isset($arg)) {
        throw new RuntimeException(
        $message
        );
    }
}
